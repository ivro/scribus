#!/bin/bash
#
# Craig Ringer, June 2005
#
# To get a build that'll work with this script, you need to:
#    collectdeps_libc $PREFIX $PREFIX/extra_libs
#    cd $PREFIX/bin
#    mv scribus scribus.bin
#    ln -s run.sh scribus
#    ln -s run.sh qtconfig
#    mkdir $PREFIX/etc
#    cp -r /etc/fonts $PREFIX/etc
#    cp `which qtconfig` $PREFIX/bin/qtconfig.bin

set -e -u

# Prefix scribus is installed to. If blank, make a weak
# attempt to detect it.
PREFIX=
BUNDLED_LIBC=

# Decide what to run. If we're given an argument, run a
# program by that name in the bin/ dir.
# Otherwise, use our own name in the bin dir with a .bin
# suffix. For example, if we were called as "scribus",
# run "bin/scribus.bin" .
if (( $# == 1 )) ; then
	EXEPATH="bin/$1"
else
	name=`basename "$0"`
	if [ "${name}" = "run.sh" ] || [ "${name}" = "scribus.wrapper" ]; then
		echo "This script must be run as a symlink"
		exit 1
	fi
	EXEPATH="bin/${name}.bin"
fi

# Attempt to detect where we're installed.
#
# This is painful and unreliable. If INSTALLDIR is set,
# we just use that instead. This method will break
# if the script is run from execve() etc with anything
# but the right relative or absolute path to the script.
#
if [ -n "${0}" ] ; then
	if [ -h "${0}" ] ; then
		# We've been called with a symlink
		ourpath="$(readlink ${0})"
	else
		# direct call to this script - hopefully
		ourpath="${0}"
	fi
	# chdir() to the dir containing the script
	cd "$(dirname ${ourpath})"
	# and get the parent directory path
	scribusdir="$(dirname `pwd`)"
else
	# install dir configured; use that
	scribusdir="${PREFIX}"
fi

# Sanity check - see if the scribus binary is present and
# executable
exe_bin="${scribusdir}/${EXEPATH}"
if [ ! -x "${exe_bin}" ] ; then
	echo "Error: Real binary not found or not executable"
	echo "I think the binary is: \"${exe_bin}\""
	echo "Aborting."
	exit 1
fi

libdir="${scribusdir}/extra_libs"

if [ -z "${BUNDLED_LIBC}" ] ; then
	# we haven't been told explicitly whether to use our bundled
	# copy of libc. Check to see if:
	#     (a) we have one; and
	#     (b) we're not running glibc >= 2.3
	# and use it if both are true.
	# FIXME: need better glibc version check, this one uses the bundled
	# glibc on glibc2.4 and newer systems too. Not that that's a problem
	# quite yet...
	if [ -x "${libdir}/libc" ] ; then
		if /lib/libc.so.6 | grep 'GNU C Library stable release version' | grep -q 2.3
		then
			BUNDLED_LIBC=yes
		else
			BUNDLED_LIBC=no
		fi
	else
		BUNDLED_LIBC=no
	fi
fi

# Set other env vars
export FONTCONFIG_FILE="${scribusdir}/etc/fonts/fonts.conf"

# Try to run the darn thing
if [ "${BUNDLED_LIBC}" = "yes" ]; then
	# Use a godawful hack to run scribus using our own bundled
	# copy of libc and friends
	echo "Using bundled libc"
	"${libdir}/libc/ld-linux.so.2" \
		--library-path "${libdir}/libc:${libdir}" \
		"${exe_bin}"
else
	# Tell ld-linux where to find our libs, but use the system libc etc.
	echo "Using system libc"
	export LD_LIBRARY_PATH="${libdir}"
	exec "${exe_bin}"
fi
